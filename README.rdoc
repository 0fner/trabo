=Trabo

Trabo (TRAdinBOt) is collection of tools for automatic trading on {Kraken crypto exchange}[https://www.kraken.com].
It comprises 3 tools written in Ruby:
* +DataCollection.rb+
* +BackTesting.rb+
* +Bot.rb+

Let's assume you know the basics about cryptocurrencies and how trading on exchanges works, and now
you want to participate in the money game with your own and very special trading strategy. Fine,
this tool collection can probably help you! But keep in mind: testing your strategy before betting
your money is crucial!

== Installation

* Install Ruby. The programs were tested with Ruby 2.5, but newer versions will probably work too.

* Install the following Ruby gems:
  * +statsample+
  * +nyaplot+
  * +addressable+
  * +httparty+
  * +hashie+

* Create the following directories within the folder which contains the Trabo Ruby programs:
  * +data+
  * +logs+

== How to run the programs

=== 1. Collect test data

Before you start trading you need to collect data, and the more the better. It should
not be less than data from half a year. Use +DataCollection.rb+ to collect test data (i.e. the orderbook
containing asks and bids). Before you start +DataCollection.rb+, have a look on the comments inside it. They
help you with the configuration.

You can also get these data from somewhere else and convert it into the correct
format. Asks and bids files are simply CSV files with the following columns:
* columns: +ask+/+bid+ +price+ | +volume+ | +exchange+ +unix+ +timestamp+ | +local+ +unix+ +timestamp+

=== 2. Implement you trading strategy

Next, you have to implement your own trading strategy as a Ruby class:
* the class name must be +Strategy+
* save your strategy class in the +strategies+ subfolder
* use +StrategyScroogeMcDuck.rb+ as a template
* implement the +initializer+ method
  * it has two arguments: +timer+ and +exchange+ instances; store them as instance variables
  * implement the rest as needed
* implement the +run+ method
  * it has one argument: the current Unix timestamp
  * this method is called with the frequency specified in +BackTesting.rb+ or +Bot.rb+
  * use this method to open and close your positions; you may find the methods in the +Exchange+ class
    helpful, as well as the private methods +create_buy_thread+ and +create_sell_thread+ in +StrategyScroogeMcDuck.rb+
* implement the +finish+ method
  * this method is responsible to clean up all operations and, e.g wait for all buy/sell threads to finish
* implement the +get_statistics+ method
  * it has one argument: the position ID
  * this method is supposed to return statistics about closed positions (e.g. the return) since the
    given position ID
  * it returns 3 variables:
    * statistics: an array with items corresponding to closed positions; the content of an
      array item is up to you (you should return information you deem useful)
    * errors: number of occurred errors
    * last position ID: the ID of the newest closed position (use this ID as the position ID argument when
      you call this method for the next time)

=== 3. Do backtesting

After you have recorded some test data and created the trading strategy, it's time to test how your
trading strategy performs. Configure +BackTesting.rb+, in particular set the following variables:
* +base_currency+
* +quote_currency+
* +asks_file+
* +bids_file+
* +strategy_file+
* +initial_quote_balance+
The comments in +BackTesting.rb+ give you more information how to set these variables. After you finished
configuring, run +BackTesting.rb+. It will load your test data and apply your trading strategy, this may take
a while. When the simulation has finished, it will tell you how your quote currency balance has changed
(hopefully it increased!). It will also create a file containing trading statistics. The content of this
statistic file depends on the implementation of the +Strategy+ class. The statistic generated by the template
strategy contains an array with the closed positions (including open time, close time, invested volume,
returned volume).

Note: you can change your trading strategy implementation after each simulation run. Just press enter
when the simulation has finished, and the back testing program will reload your trading strategy file and run
the simulation again.

=== 4. Start trading

When you are confident that your trading strategy can be a winner, it's time to start trading! First, create an
account at {Kraken crypto exchange}[https://www.kraken.com] and obtain an API key/secret pair. Create the Ruby file
+kraken_api_secret.rb+ and save the API key/secret pair in it:
  API_KEY = 'DUMMY_KEY'
  API_SECRET = 'DUMMY_SECRECT'

*WARNING:* Take care that no one except you can access this file! Everyone who has access to your API key/secret
pair can access your Kraken account!

Next, configure +Bot.rb+, the comments within the file will help you. Finally, run +Bot.rb+ to start trading.
Good luck!

Note: you can run the trading bot in simulation mode (+simulation_mode+ = +true+) which disables order placement but
gives you access to online prices.


== License

MIT License

Copyright 2019 Patrick Ofner (patrick@ofner.science)

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

== Contact

Patrick Ofner <patrick@ofner.science>